1.目前框架的无人车控制方法是，在每control循环，用语句：
if(ID==X)
来判断自身应该采取的运动率
2.所有无人车分为两部分初始化，1是共同初始化，在swarmsim里面完成
第二部分是独立初始化，根据各车ID，在获取swarmsim的返回值之后，分别对
各车的状态量或者是logger进行更改
3.目前存在的问题，是无法使用TCP进行调节，需要通过TCP传递的参数太过于庞大
同时连接数量也很多，管理比较困难。
4.如果还要在车辆里面塞入感知函数，则函数的复杂性会进一步上升


所以，目前的想法是制作通讯中间件

1.去中心化的软件框架，启动时没有一个名字叫roscore的中心软件控制通讯
2.自适应协议，两个无人车各自之间毫无交集，相互靠近时首先交换通用文本协议（描述通讯协议结构的txt文本），然后运行时生成通讯协议，这样就可以实现
每个无人车各自携带自己的协议就可以了，不需要两边对协议，而且因为是自动生成memcpy的中间过程，我们也不需要对过程进行检查，当联系拓扑图复杂度爆炸时，这一条特性高度重要
3.目前没有想明白的事情是：交换协议后解析得到的东西有什么用。现在的想法是，寄宿在本机的类似ros节点的中间节点里面。后面通过语音通讯或者固定语法，作为实时的命令行输入，允许软件从节点中动态的选取或者筛选信息，就像数据库一样可以调用以往的信息以及筛选特定的信息，动态的辅助调用。这要求各个子程序具备可变通用输入接口的能力
类似于我们之前想做的拖拽ros话题（使用UI），强制将ros话题里面的数据灌入到单个运行节点里面的能力