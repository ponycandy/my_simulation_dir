对于六边形静态，替换cpp为vehicle1，配置为swarm0.xml
对于六边形动态，替换cpp为vehicle2，配置为swarm0.xml

对于六边形静态--观测器触发器，替换cpp为vehicle3，配置为swarm0.xml
对于六边形动态--观测器触发器，替换cpp为vehicle4，配置为swarm0.xml

对于钻石静态，替换cpp为vehicle5，配置为swarm2.xml
对于钻石动态，替换cpp为vehicle6，配置为swarm2.xml

对于弓静态，替换cpp为vehicle7，配置为swarm3.xml
对于弓动态，替换cpp为vehicle8，配置为swarm3.xml

目标包围，替换cpp为vehicle9，替换.h为vehicle9a.配置为swarm4.xml

....需要把软件变得更好用
具体来说，可视化操作所有agent的状态设置，而不是代码操作（容易碰到不该碰的东西）
或者xml操作（还是容易碰到不该碰的东西导致报错）

但是上面的成本太高了，还不存在一个可以快速构建此类软件的框架（数学模型建议：
由于用户输入意图的复杂性以及和显示对象的高度耦合（鼠标和对象碰撞检测），即使
做出来此类框架，也几乎不能够减少运行逻辑编写的工作量）。

合理的想法是使用游戏引擎，这类引擎一般已经包含了大量的交互逻辑框架 
